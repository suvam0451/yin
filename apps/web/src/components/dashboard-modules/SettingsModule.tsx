import {useSearchParams} from 'next/navigation';
import {
	Box,
	Button,
	Checkbox,
	Divider,
	Select,
	Text,
	Tooltip
} from '@mantine/core';
import PersonaFormField from '../personas/PersonaFormField';
import styled from 'styled-components';
import styles from './SettingsModule.module.css';
import {FaRegQuestionCircle} from 'react-icons/fa';
import React, {useEffect, useState} from 'react';
import {IoMdRefresh} from 'react-icons/io';
import {useQuery} from '@tanstack/react-query';
import BackendService from '../../services/backend.service';
import {z} from 'zod';
import {useYinAuthContext} from '../../state/authContext';
import {
	OpenaiChatbotPersona,
	OpenaiChatbotPersonaBackendType
} from '../personas/PersonaEdit';

const SettingsSection = styled(Box)`
    border: 1px #ffffff16 solid;
    padding: 1rem;
    border-radius: 0.25rem;
    background-color: #1E1E1E;
    margin: 2rem 0;
`;

function SettingsModule() {
	const searchParams = useSearchParams();
	const auth = useYinAuthContext();
	const [Data, setData]
		= useState<z.infer<typeof OpenaiChatbotPersona>[]>([]);
	const [searchValue, setSearchValue]
		= useState<string | null>(null);


	// Queries
	const {status, data, refetch} = useQuery({
		queryKey: ['user/openai-persona'],
		queryFn: api,
		enabled: auth.token !== null && auth.token !== ''
	});


	async function api() {
		if (!auth.token) return [];
		return BackendService.getAuthenticated<z.infer<
			typeof OpenaiChatbotPersonaBackendType>>(
			auth.token,
			`user/openai-persona`);
	}

	function personaSelected(e: any) {
		const match = Data.find((o) => o.uuid === e);
		if (!match) return;

		console.log(match);
	}

	useEffect(() => {
		// @ts-ignore
		if (data?.data?.data!) {
			// @ts-ignore
			setData(data?.data?.data?.map((o) => o.openaiChatbotPersona));
		}
	}, [status, data]);

	useEffect(() => {
		if (!searchValue) return;
		console.log('changed persona selection', searchValue);
		// personaFormContext.updateUuid(searchValue);
	}, [searchValue]);

	if (searchParams.get('module') !== 'settings') return <Box></Box>;

	return <Box>
		<SettingsSection>
			<Text c={'#fff'} opacity={0.87} size={'xl'}>
				Assistant Settings</Text>
			<Divider mt={'1rem'} mb={'1rem'} />
			<Text c={'#fff'} opacity={0.6}>Changing persona will change the way Yin
				responds
				to your questions.
				I use your last 5 messages to generate the next reply.
				This is separate for each individual persona your select.
			</Text>
			<Box style={{marginTop: '1rem'}}>
				<PersonaFormField
					TitleComponent={
						<>
							<Text c={'#fff'} opacity={0.6}>Select Persona</Text>
							<Tooltip label="Cannot be edited in current version of software.">
								<FaRegQuestionCircle color={'#fff'} opacity={0.6}
																		 style={{marginLeft: '0.25rem'}} />
							</Tooltip>
						</>
					}
					BodyComponent={<React.Fragment>
						<Select
							classNames={{
								option: styles.option
							}}
							allowDeselect={false}
							placeholder="Select"
							data={Data.map((o) =>
								({value: o.uuid, label: o.name}))}
							style={{maxWidth: '16rem'}}
							onChange={(_value, option) => {
								setSearchValue(_value);
								personaSelected(_value);
							}}

							value={searchValue}
						/>
						<IoMdRefresh
							size={32} color={'#fff'} opacity={0.6}
							style={{marginLeft: '0.5rem'}}
							onClick={(e) => {
								refetch().then((res) => {
									console.log(res);
								});
							}} />
					</React.Fragment>}
				/>
				<Box style={{marginTop: "2rem"}}>
					<Button color={'purple'}>Save</Button>
					<Button color={'purple'} variant={'outline'} style={{marginLeft: "0.5rem"}}>Set to Default</Button>
				</Box>
			</Box>
		</SettingsSection>
		<SettingsSection>
			<Text c={'#fff'} opacity={0.87} size={'xl'}>
				Privacy Settings
			</Text>
			<Divider mt={'1rem'} mb={'1rem'} />
			<Text c={'#fff'} opacity={0.6}>
				These settings change if the prompts and images generated by you are
				visible in the home-screen for anyone who visits the website.
				This is off be default.
			</Text>

			<Checkbox
				classNames={{
					label: styles.label
				}}
				color={'#ffffff87'}
				size={'md'}
				label="Make my profile public"
				mt={'1rem'}
			/>

			<Button variant={'outline'} opacity={0.87} color={'red'} mt={'2rem'}>
				Delete my Data
			</Button>
		</SettingsSection>
	</Box>;
}

export default SettingsModule;